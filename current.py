import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import ClientSession

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç BotFather
TOKEN = "7675457263:AAE73KFO1r8I0_OZQcwocgHS1asS0E0Clds"

# –ö–ª—é—á API (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤)
API_KEY = "bf91b1f1f2d67593b50e9c89779a787e"

# –¢–≤–æ–π Telegram ID (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
ADMIN_ID = 7522319330  # <--- —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á–∏ polling
polling_task = None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –≤–∞–ª—é—Ç, –¥–æ–±–∞–≤–ª–µ–Ω—ã RUB –∏ UAH
currency_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="USD", callback_data="currency_USD"),
            InlineKeyboardButton(text="EUR", callback_data="currency_EUR"),
            InlineKeyboardButton(text="GEL", callback_data="currency_GEL"),
            InlineKeyboardButton(text="PLN", callback_data="currency_PLN"),
        ],
        [
            InlineKeyboardButton(text="RUB", callback_data="currency_RUB"),
            InlineKeyboardButton(text="UAH", callback_data="currency_UAH"),
            InlineKeyboardButton(
                text="TRY", callback_data="currency_TRY"
            ),  # –¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞
            InlineKeyboardButton(
                text="CZK", callback_data="currency_CZK"
            ),  # –ß–µ—à—Å–∫–∞—è –∫—Ä–æ–Ω–∞
        ],
    ]
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç.\n–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
        reply_markup=currency_keyboard,
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –∫–Ω–æ–ø–∫–∞–º–∏
@dp.callback_query()
async def currency_callback_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data

    currency_map = {
        "currency_USD": "USD",
        "currency_EUR": "EUR",
        "currency_GEL": "GEL",
        "currency_PLN": "PLN",
        "currency_RUB": "RUB",
        "currency_UAH": "UAH",
        "currency_TRY": "TRY",
        "currency_CZK": "CZK",
    }

    if data in currency_map:
        from_currency = currency_map[data]
        user_data[user_id] = {"from_currency": from_currency}
        text = f"–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {from_currency}\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n100 to USD"
    else:
        text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞."

    await callback.message.answer(text)
    await callback.answer()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ exchangerate.host
async def get_conversion(amount: float, from_currency: str, to_currency: str):
    url = f"https://api.exchangerate.host/convert?access_key={API_KEY}&from={from_currency}&to={to_currency}&amount={amount}"
    async with ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            if data.get("success"):
                return data.get("result")
            return None


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—É–º–º–æ–π –∏ –≤–∞–ª—é—Ç–æ–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
@dp.message()
async def amount_to_currency_handler(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id not in user_data or "from_currency" not in user_data[user_id]:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
            reply_markup=currency_keyboard,
        )
        return

    try:
        parts = text.split()
        if len(parts) != 3 or parts[1].lower() != "to":
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        amount = float(parts[0])
        from_currency = user_data[user_id]["from_currency"]
        to_currency = parts[2].upper()

        result = await get_conversion(amount, from_currency, to_currency)
        if result is not None:
            await message.answer(
                f"{amount} {from_currency} = {result:.2f} {to_currency}"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.")

    except Exception:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 100 to EUR")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ polling (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message(Command("start_bot"))
async def cmd_start_bot(message: types.Message):
    global polling_task
    if message.from_user.id != ADMIN_ID:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∞–¥–º–∏–Ω–æ–≤
    if polling_task and not polling_task.done():
        await message.answer("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        return
    polling_task = asyncio.create_task(dp.start_polling(bot))
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message(Command("stop_bot"))
async def cmd_stop_bot(message: types.Message):
    global polling_task
    if message.from_user.id != ADMIN_ID:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∞–¥–º–∏–Ω–æ–≤
    if polling_task:
        polling_task.cancel()
        polling_task = None
        await message.answer("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await message.answer("–ë–æ—Ç –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")


async def main():
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    global polling_task
    polling_task = asyncio.create_task(dp.start_polling(bot))
    await polling_task


if __name__ == "__main__":
    asyncio.run(main())
